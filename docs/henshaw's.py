# -*- coding: utf-8 -*-
"""Henshaw's.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NXcshPP_7VoyubiphOAMmrAKnh5fPOWM
"""

import pandas as pd
import numpy as np

df = pd.read_csv('henshaw_master_dataset_raw.csv')

pd.set_option('display.max_columns', None)
df.head(10)

#Get an average score on leadership questions
df['LeadershipScore'] = df[['q59', 'q60', 'q61', 'q62', 'q63', 'q64', 'q65', 'q66', 'q67',
                           'q69', 'q70', 'q71', 'q72', 'q73', 'q74', 'q75', 'q76', 'q77',
                           'q78']].mean(axis=1)

#Get an average score on teamwork questions
df['TeamworkScore'] = df[['q45','q46','q31','q32']].mean(axis=1)

#Get an average score on job satisfaction questions
df['JobSatisfactionScore'] = df[['q2','q3','q26','q40','q41']].mean(axis=1)

# Replace blank strings or spaces with nan across the whole df
df.replace(r'^\s*$', np.nan, regex=True, inplace=True)

#outlier list for variables
zscore_vars = [
    'PCTCheer', 'LVI_RiskScore', 'EngagementScore',
    'YTDPROFIT', 'SUBTOTALSALES', 'LeadershipScore',
    'TeamworkScore', 'JobSatisfactionScore',
    'NetTurnover', 'CSAT2019', 'CustComplaints'
]

from scipy.stats import zscore
for var in zscore_vars:
    df[var] = pd.to_numeric(df[var], errors='coerce')
    df[f'Z_{var}'] = zscore(df[var], nan_policy='omit')

zscore_columns = [f'Z_{var}' for var in zscore_vars]
df['outlier_flag'] = df[zscore_columns].abs().gt(3).any(axis=1).astype(int)

df['include_flag'] = (
    (df['N_EEs'] >= 5) &
    df[['YTDPROFIT', 'SUBTOTALSALES', 'CSAT2019', 'CustComplaints']].notnull().all(axis=1) &
    (df['outlier_flag'] == 0)
)

pd.set_option('display.max_columns', None)
df.head(20)

df['FoodServiceSales'] = pd.to_numeric(df['FoodServiceSales'], errors='coerce')

df['NetTurnover'] = pd.to_numeric(df['NetTurnover'], errors='coerce')

from scipy.stats import pearsonr

r1, p1 = pearsonr(df.loc[df['include_flag'], 'EngagementStoreAverage'], df.loc[df['include_flag'], 'YTDPROFIT'])
r2, p2 = pearsonr(df.loc[df['include_flag'], 'EngagementStoreAverage'], df.loc[df['include_flag'], 'SUBTOTALSALES'])
r4, p4 = pearsonr(df.loc[df['include_flag'], 'EngagementStoreAverage'], df.loc[df['include_flag'], 'FoodServiceSales'])
r5, p5 = pearsonr(df.loc[df['include_flag'], 'EngagementStoreAverage'], df.loc[df['include_flag'], 'NetTurnover'])
print(f"Engagement vs. Profit: r = {r1:.3f}, p = {p1:.3f}")
print(f"Engagement vs. Sales: r = {r2:.3f}, p = {p2:.3f}")

print(f"Engagement vs. Food Service Sales: r = {r4:.3f}, p = {p4:.3f}")
print(f"Engagement vs. Net Turnover: r = {r5:.3f}, p = {p5:.3f}")

#Regression
import statsmodels.api as sm

# Select relevant columns and drop rows with NaNs
df_reg = df[['EngagementStoreAverage', 'YTDPROFIT']].copy()
df_reg = df_reg.dropna()

# Define X and y
X = sm.add_constant(df_reg['EngagementStoreAverage'])
y = df_reg['YTDPROFIT']

# Run the regression
model = sm.OLS(y, X).fit()
print(model.summary())

import seaborn as sns
import matplotlib.pyplot as plt

# Plot with regression line
plt.figure(figsize=(10, 6))
sns.regplot(
    x='EngagementStoreAverage',
    y='YTDPROFIT',
    data=df_reg,
    scatter_kws={'s': 60, 'alpha': 0.7},
    line_kws={'color': 'blue', 'linewidth': 3}
)
plt.title('Employee Engagement vs. Store Profitability', fontsize=14)
plt.xlabel('Employee Engagement Score')
plt.ylabel('YTD Profit (%)')
plt.grid(True)
plt.tight_layout()
plt.show()
